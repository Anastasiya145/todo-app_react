{"version":3,"sources":["types/FilterType.ts","components/Footer.tsx","components/NewTodoField.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoApp.tsx","utils/useLocaleStorage.ts","App.tsx","index.tsx"],"names":["FilterType","Footer","onDeleteCompletedTodos","todosLeft","completedTodosLength","linkNormalizing","value","className","data-cy","Object","entries","map","key","to","isActive","classNames","selected","type","onClick","NewTodoField","query","onInputChange","onFormSubmit","onSubmit","ev","placeholder","onChange","target","TodoItem","todo","onDeleteTodo","onToggle","onRenameTodo","useState","isEditing","setIsEditing","title","newTitle","setNewTitle","onSubmitNewTitle","str","trim","id","onDoubleClick","completed","editing","checked","onKeyDown","onBlur","TodoList","todos","TodoApp","setQuery","initialValue","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setItem","stringify","useLocalStorage","setTodos","location","useLocation","activeTodosLength","filter","length","completedTodos","useCallback","onToggleAll","isAllCompleted","every","allTodos","visibleTodos","useMemo","pathname","slice","Active","Completed","preventDefault","newTodo","Date","htmlFor","App","path","index","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7be8b29c.chunk.js","sourcesContent":["/* eslint-disable-next-line */\nexport enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FilterType } from '../types/FilterType';\n\ntype Props = {\n  onDeleteCompletedTodos(): void,\n  todosLeft: number,\n  completedTodosLength: number,\n};\n\nexport const Footer: React.FC<Props> = ({\n  onDeleteCompletedTodos,\n  todosLeft,\n  completedTodosLength,\n}) => {\n  const linkNormalizing = (value: string) => {\n    if (value === 'all') {\n      return ('/');\n    }\n\n    return (`/${value}`);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${todosLeft} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {Object.entries(FilterType).map(([key, value]) => (\n          <li key={key}>\n            <NavLink\n              to={linkNormalizing(value)}\n              className={({ isActive }) => classNames({\n                selected: isActive,\n              })}\n            >\n              {key}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        onClick={onDeleteCompletedTodos}\n        className={classNames(\n          'clear-completed',\n          {\n            'clear-completed--hidden':\n            !completedTodosLength,\n          },\n        )}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React from 'react';\n\nexport type Props = {\n  query: string,\n  onInputChange(str: string): void,\n  onFormSubmit(event: React.FormEvent<HTMLFormElement>): void,\n};\n\nexport const NewTodoField: React.FC<Props> = ({\n  query,\n  onInputChange,\n  onFormSubmit,\n}) => {\n  return (\n    <form onSubmit={(ev) => onFormSubmit(ev)}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={query}\n        onChange={(ev) => onInputChange(ev.target.value)}\n      />\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onDeleteTodo(id: number): void,\n  onToggle(id: number): void,\n  onRenameTodo(id: number, str: string): void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onDeleteTodo,\n  onToggle,\n  onRenameTodo,\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const onChangeTitle = (str: string) => {\n    setNewTitle(str);\n  };\n\n  const onSubmitNewTitle = (str: string) => {\n    setIsEditing(false);\n\n    const title = str.trim();\n\n    if (title) {\n      if (todo.title !== title) {\n        onRenameTodo(todo.id, title);\n      }\n    } else {\n      onDeleteTodo(todo.id);\n    }\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.key === 'Escape') {\n      setIsEditing(false);\n      setNewTitle(todo.title);\n    }\n\n    if (ev.key === 'Enter') {\n      onSubmitNewTitle(newTitle);\n    }\n  };\n\n  return (\n    <li\n      onDoubleClick={() => setIsEditing(!isEditing)}\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditing },\n      )}\n    >\n      <div\n        className=\"view\"\n      >\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={classNames(\n            { 'toggle-view': !todo.completed },\n            { 'toggle-completed': todo.completed },\n          )}\n          onClick={() => onToggle(todo.id)}\n          checked={todo.completed}\n          onChange={() => {}}\n        />\n        {/* eslint-disable-next-line */}\n        <label>{todo.title}</label>\n        {/* eslint-disable-next-line */}\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => onDeleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={(ev) => onChangeTitle(ev.target.value)}\n        onKeyDown={(ev) => onKeyDown(ev)}\n        onBlur={() => onSubmitNewTitle(newTitle)}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  onDeleteTodo(id: number): void,\n  onToggle(id: number): void,\n  onRenameTodo(id: number, str: string): void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onDeleteTodo,\n  onToggle,\n  onRenameTodo,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onDeleteTodo={onDeleteTodo}\n          onToggle={onToggle}\n          onRenameTodo={onRenameTodo}\n        />\n      ))}\n    </ul>\n  );\n};\n","import React, {\n  useCallback,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useLocalStorage } from '../utils/useLocaleStorage';\nimport { FilterType } from '../types/FilterType';\nimport { Todo } from '../types/Todo';\nimport { Footer } from './Footer';\nimport { NewTodoField } from './NewTodoField';\nimport { TodoList } from './TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n\n  const location = useLocation();\n\n  const activeTodosLength = todos.filter(todo => !todo.completed).length;\n\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const onInputChange = (str: string) => {\n    setQuery(str);\n  };\n\n  const onFormSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n\n    const newTodo = {\n      id: +new Date(),\n      title: query,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setQuery('');\n  };\n\n  const onDeleteCompletedTodos = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const onDeleteTodo = useCallback((id: number) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }, [todos]);\n\n  const onRenameTodo = useCallback((id: number, newTitle: string) => {\n    setTodos(todos.map(todo => (\n      todo.id === id ? {\n        ...todo,\n        title: newTitle,\n      } : todo)));\n  }, [todos]);\n\n  const onToggle = useCallback((id: number) => {\n    setTodos(todos.map(todo => (\n      todo.id === id ? {\n        ...todo,\n        completed: !todo.completed,\n      } : todo)));\n  }, [todos]);\n\n  const onToggleAll = useCallback((): void => {\n    const isAllCompleted = todos.every(todo => todo.completed);\n\n    const allTodos = todos.map(todo => (\n      isAllCompleted\n        ? {\n          ...todo,\n          completed: !todo.completed,\n        }\n        : {\n          ...todo,\n          completed: true,\n        }\n    ));\n\n    setTodos([...allTodos]);\n  }, [todos]);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      switch (location.pathname.slice(1)) {\n        case FilterType.Active:\n          return !todo.completed;\n\n        case FilterType.Completed:\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n  }, [location, todos]);\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoField\n          query={query}\n          onInputChange={onInputChange}\n          onFormSubmit={onFormSubmit}\n        />\n      </header>\n\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              data-cy=\"toggleAll\"\n              onClick={onToggleAll}\n            />\n            {/* eslint-disable-next-line */}\n            <label htmlFor=\"toggle-all\">\n              Mark all as complete\n            </label>\n\n            <TodoList\n              todos={visibleTodos}\n              onDeleteTodo={onDeleteTodo}\n              onToggle={onToggle}\n              onRenameTodo={onRenameTodo}\n            />\n          </section>\n\n          <Footer\n            onDeleteCompletedTodos={onDeleteCompletedTodos}\n            todosLeft={activeTodosLength}\n            completedTodosLength={completedTodos.length}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from '../types/Todo';\n\nexport function useLocalStorage<T = Todo>(key: string, initialValue: T):\n[T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (value: T) => {\n    setStoredValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, save];\n}\n","import React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={<TodoApp />} />\n        <Route path=\"/active\" element={<TodoApp />} />\n        <Route path=\"/completed\" element={<TodoApp />} />\n      </Route>\n      <Route path=\"*\" element={(<Navigate to=\"/\" />)} />\n    </Routes>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\n/* eslint-disable */\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}